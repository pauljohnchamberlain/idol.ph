generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CREATOR
  BRAND
  ADMIN
}

enum CollaborationStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
}

model User {
  id           String    @id @default(uuid())
  name         String
  username     String?   @unique
  email        String    @unique
  password     String
  role         Role
  profileImage String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  creatorProfile          Creator?
  brandProfile            Brand?
  collaborationsAsBrand   Collaboration[] @relation("BrandCollaborations")
  collaborationsAsCreator Collaboration[] @relation("CreatorCollaborations")
  reviewsReceived         Review[]        @relation("ReviewsReceived")
  reviewsGiven            Review[]        @relation("ReviewsGiven")
}

model Creator {
  id           String    @id @default(uuid())
  userId       String    @unique
  phone        String?
  city         String?
  state        String?
  category     String?
  bannerImage  String?
  description  String?
  rating       Float     @default(0)
  updatedAt    DateTime  @updatedAt

  // Relation to User
  user User @relation(fields: [userId], references: [id])

  // Other Relations
  platforms     Platform[]
  achievements  Achievement[]
  packages      Package[]
  samples       Sample[]
}

model Brand {
  id          String    @id @default(uuid())
  userId      String    @unique
  category    String[]
  location    String?
  description String?
  rating      Float     @default(0)
  updatedAt   DateTime  @updatedAt

  // Relation to User
  user User @relation(fields: [userId], references: [id])
}

model Platform {
  id        String   @id @default(uuid())
  name      String
  url       String
  creatorId String

  // Relation
  creator Creator @relation(fields: [creatorId], references: [id])

  @@index([creatorId])
}

model Achievement {
  id          String   @id @default(uuid())
  title       String
  description String?
  date        DateTime?
  creatorId   String

  // Relation
  creator Creator @relation(fields: [creatorId], references: [id])

  @@index([creatorId])
}

model Package {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  creatorId   String

  // Relation
  creator Creator @relation(fields: [creatorId], references: [id])

  @@index([creatorId])
}

model Sample {
  id        String   @id @default(uuid())
  title     String
  url       String
  creatorId String

  // Relation
  creator Creator @relation(fields: [creatorId], references: [id])

  @@index([creatorId])
}

model Collaboration {
  id          String               @id @default(uuid())
  brandId     String
  creatorId   String
  status      CollaborationStatus
  description String
  budget      Float
  workResult  String?
  dealDate    DateTime             @default(now())
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  // Relations
  brand   User @relation("BrandCollaborations", fields: [brandId], references: [id], map: "fk_collaboration_brandId")
  creator User @relation("CreatorCollaborations", fields: [creatorId], references: [id], map: "fk_collaboration_creatorId")
}

model Review {
  id           String    @id @default(uuid())
  reviewToId   String
  reviewFromId String
  title        String
  description  String
  rating       Float
  image        String?
  date         DateTime  @default(now())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  reviewTo   User @relation("ReviewsReceived", fields: [reviewToId], references: [id])
  reviewFrom User @relation("ReviewsGiven", fields: [reviewFromId], references: [id])
}
